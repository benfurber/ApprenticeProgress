// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`goalSummary has a valid snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GoalSummary
    details={
      Object {
        "actions": Array [],
        "description": "Hello world",
        "score": 0,
        "tag": "One",
        "title": "Testing title",
      }
    }
    navigation={
      Object {
        "getParam": [Function],
        "navigate": [MockFunction],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeOpacity": 0.8,
      "children": <Styled(ViewNB)
        style={
          Object {
            "backgroundColor": "#fffd",
            "borderColor": "#eeec",
            "borderRadius": 3,
            "borderWidth": 2,
            "marginHorizontal": 10,
            "marginTop": 10,
            "padding": 20,
          }
        }
      >
        <Styled(H3)
          style={
            Object {
              "marginBottom": 10,
            }
          }
        >
          Testing title
           (
          0
          /5)
        </Styled(H3)>
        <Tag
          text="One"
        />
      </Styled(ViewNB)>,
      "onPress": [Function],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(H3)
            style={
              Object {
                "marginBottom": 10,
              }
            }
          >
            Testing title
             (
            0
            /5)
          </Styled(H3)>,
          <Tag
            text="One"
          />,
        ],
        "style": Object {
          "backgroundColor": "#fffd",
          "borderColor": "#eeec",
          "borderRadius": 3,
          "borderWidth": 2,
          "marginHorizontal": 10,
          "marginTop": 10,
          "padding": 20,
        },
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              "Testing title",
              " (",
              0,
              "/5)",
            ],
            "style": Object {
              "marginBottom": 10,
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            "Testing title",
            " (",
            0,
            "/5)",
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "text": "One",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.8,
        "children": <Styled(ViewNB)
          style={
            Object {
              "backgroundColor": "#fffd",
              "borderColor": "#eeec",
              "borderRadius": 3,
              "borderWidth": 2,
              "marginHorizontal": 10,
              "marginTop": 10,
              "padding": 20,
            }
          }
        >
          <Styled(H3)
            style={
              Object {
                "marginBottom": 10,
              }
            }
          >
            Testing title
             (
            0
            /5)
          </Styled(H3)>
          <Tag
            text="One"
          />
        </Styled(ViewNB)>,
        "onPress": [Function],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(H3)
              style={
                Object {
                  "marginBottom": 10,
                }
              }
            >
              Testing title
               (
              0
              /5)
            </Styled(H3)>,
            <Tag
              text="One"
            />,
          ],
          "style": Object {
            "backgroundColor": "#fffd",
            "borderColor": "#eeec",
            "borderRadius": 3,
            "borderWidth": 2,
            "marginHorizontal": 10,
            "marginTop": 10,
            "padding": 20,
          },
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                "Testing title",
                " (",
                0,
                "/5)",
              ],
              "style": Object {
                "marginBottom": 10,
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Array [
              "Testing title",
              " (",
              0,
              "/5)",
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "text": "One",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
